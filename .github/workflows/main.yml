name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: heron-back-ci-cd
  CODE_DEPLOY_APPLICATION_NAME: heron-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME:  heron-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # (4-1) Create application.properties from Secrets
      - name: Create application.properties
        run: |
          touch ./app/src/main/resources/application.properties
          echo "${{ secrets.APPLICATION }}" > ./app/src/main/resources/application.properties
          cat ./app/src/main/resources/application.yml

#          mkdir .app/src/main/resources
#          cd .app/src/main/resources
#          touch ./application.properties
#          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties

      # (2.1) Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # gradlew 스크립트에 실행 권한 부여

      # (3) Gradle build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: build
          build-root-directory: ./app

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.HERON_CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.HERON_CICD_PRIVATE_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip